from matplotlib import pyplot as plt
import time
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score
import pickle

class DataRegressorApp:
    def __init__(self):
        self.data = None
        self.report = None

    def load_data(self, file_path):
        self.data = pd.read_csv(file_path)

        st.success(f"–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö {file_path.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        st.table(self.data.sample(10))  

    def analyse_data(self):
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
        
        st.write("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ : {}".format(len(self.data.columns)))
        st.write("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫    : {}".format(len(self.data)))
        st.write("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        st.write(self.data.describe(include='all'))

        with plt.style.context('dark_background'):
            st.write('–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ (price)')
            st.session_state.plt1 = plt.figure(figsize = (15,5))
            plt.subplot(1,2,2)
            sns.histplot(x = 'price', data = self.data, kde = True)
            plt.subplot(1,2,1)
            sns.boxplot(x = 'price', data = self.data)
            st.write(st.session_state.plt1)
            st.write('–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 20000, –∑–¥–µ—Å—å –º—ã –≤–∏–¥–∏–º, —á—Ç–æ –º–µ–¥–∏–∞–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ‚âà 7500. –≠—Ç–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ–º –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: –±–∏–∑–Ω–µ—Å –∏ —ç–∫–æ–Ω–æ–º.')

            st.write('–ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç–µ–ø–µ—Ä—å, –∫–∞–∫ –∑–∞–≤–∏—Å–∏—Ç —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –æ—Ç –∫–ª–∞—Å—Å–∞ –∏ –∞–≤–∏–æ–∫–æ–º–ø–∞–Ω–∏–∏ —Å–∞–º–æ–ª–µ—Ç–∞')
            st.session_state.plt2 = plt.figure()
            sns.barplot(x='airline',y='price',hue="class",data=self.data.sort_values("price"))
            st.write(st.session_state.plt2)
            st.write('–ë–∏–∑–Ω–µ—Å-—Ä–µ–π—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –¥–≤—É—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö: Air India –∏ Vistara. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö –Ω–∞ –±–∏–ª–µ—Ç—ã –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—á—Ç–∏ –≤ 5 —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ —ç–∫–æ–Ω–æ–º-–∫–ª–∞—Å—Å–∞.')
            
            st.write('–†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–∞–∫–∂–µ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–π—Å–∞ –∏ –∫–ª–∞—Å—Å–∞ –±–∏–ª–µ—Ç–∞')
            st.session_state.plt3 = plt.figure()
            sns.lineplot(data=self.data,x='duration',y='price',hue='class',palette='hls')
            plt.xlabel('Duration',fontsize=15)
            plt.ylabel('Price',fontsize=15)
            st.write(st.session_state.plt3)
            st.write('–° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –≤ —ç–∫–æ–Ω–æ–º-, —Ç–∞–∫ –∏ –≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞—Ö.')

    def prepare_data(self):
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")

        st.write(f'–ß–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ —Ñ—Ä–µ–π–º–µ –¥–∞–Ω–Ω—ã—Ö: {self.data.isnull().sum().sum ()}')
        st.write(f'–ß–∏—Å–ª–æ –¥—É–ø–ª–∏–∫–∞—Ç–æ–≤ –≤–æ —Ñ—Ä–µ–π–º–µ –¥–∞–Ω–Ω—ã—Ö: {len(self.data)- len(self.data.drop_duplicates())}')

        le=LabelEncoder()
        df = self.data
        for col in self.data.columns:
            if self.data[col].dtype=='object':
                df[col]=le.fit_transform(self.data[col])
        
        df.drop(['Unnamed: 0', 'flight'], axis=1, inplace=True)

        names = df.columns
        indexes = df.index

        mmscaler=MinMaxScaler(feature_range=(0,1))
        df = mmscaler.fit_transform(df)

        self.data = pd.DataFrame(df, columns=names, index=indexes)

        st.write('–§—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:')
        st.write(self.data.sample(5))
        st.write('- –ß–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 2\n'+
                 '- –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é LabelEncoder\n'+
                 '- –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ (0,1) —Å –ø–æ–º–æ—â—å—é MinMaxScaler')

    def train_model(self):
        X = self.data.drop('price', axis=1)
        y = self.data['price']

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        with open('../models/model_SVR.pkl', 'rb') as file: # rb stands for read binary which is used to deserialize the ML model from the working environment
            model = pickle.load(file)
        predictions = model.predict(X_test)
        self.report = {
            'mean_squared_error': mean_squared_error(y_test, predictions),
            'r2_score': r2_score(y_test, predictions)
        }

    @st.cache_data
    def save_report(_self, _file_path):
        with open(_file_path, 'w') as f:
            f.write(str(_self.report))

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = DataRegressorApp()

st.title('–†–µ–≥—Ä–µ—Å—Å–∏—è –¥–∞–Ω–Ω—ã—Ö')

st.header('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
file_path = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤", type=['csv'])
if file_path is not None:
    app.load_data(file_path)
    st.header('–†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    app.analyse_data()
    app.prepare_data()
    st.header('–û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ–ø–æ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (SVC)')
    app.train_model()
    st.header("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
    st.json(str(app.report))

    save_button = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç")
    if save_button:
        app.save_report('../reports/regression_report.txt')
        st.success('–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üòä')
